name: Build TVBox (Manual)

on:
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: '强制重新构建（即使没有新提交）'
        required: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - userName: q215613905
            repoUrl: https://github.com/q215613905/TVBoxOS
            branchName: main
          - userName: takagen99
            repoUrl: https://github.com/takagen99/Box
            branchName: main
            javaVersion: 17

    steps:
      # 步骤1：检出当前仓库（用于记录构建日志）
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: actions

      # 步骤2：获取目标仓库最新提交
      - name: Get Latest Commit
        run: |
          git clone --depth=1 -b ${{ matrix.branchName }} ${{ matrix.repoUrl }} TVBoxOSC
          cd TVBoxOSC
          commit=$(git log -1 --pretty=format:"%H")
          echo "最新提交: $commit"
          
          # 检查是否需要构建（有新提交或强制重建）
          cd ../actions
          if ! grep -q "$commit" ./build_log/${{ matrix.userName }}.log || [[ "${{ inputs.force_rebuild }}" == "true" ]]; then
            echo "需要构建"
            echo "commit=$commit" >> $GITHUB_ENV
            echo "commit_short=${commit:0:7}" >> $GITHUB_ENV
          else
            echo "无新提交，跳过构建"
          fi

      # 步骤3：完整克隆源代码（如果需要构建）
      - name: Full Clone Source
        if: ${{ env.commit }}
        working-directory: TVBoxOSC
        run: |
          git fetch --unshallow
          echo "构建标签=$(git log --date=format:'%Y%m%d_%H%M' --pretty=format:%cd -1)" >> $GITHUB_ENV

      # 步骤4：配置签名信息
      - name: Setup Signing
        if: ${{ env.commit }}
        working-directory: TVBoxOSC
        run: |
          # 复制签名文件
          cp ${{ github.workspace }}/actions/.github/scripts/TVBoxOSC.jks ./app/
          
          # 配置gradle.properties
          cat >> gradle.properties <<EOF
          RELEASE_STORE_FILE=./TVBoxOSC.jks
          RELEASE_KEY_ALIAS=TVBoxOSC
          RELEASE_STORE_PASSWORD=TVBoxOSC
          RELEASE_KEY_PASSWORD=TVBoxOSC
          EOF

          # 修改build.gradle
          sed -i '/android {/a\
          signingConfigs {\
              release {\
                  storeFile file(RELEASE_STORE_FILE)\
                  storePassword RELEASE_STORE_PASSWORD\
                  keyAlias RELEASE_KEY_ALIAS\
                  keyPassword RELEASE_KEY_PASSWORD\
                  v1SigningEnabled true\
                  v2SigningEnabled true\
              }\
          }' ./app/build.gradle

          sed -i '/buildTypes {/a\
              release {\
                  signingConfig signingConfigs.release\
              }' ./app/build.gradle

      # 步骤5：修改版本信息
      - name: Modify Version
        if: ${{ env.commit }}
        working-directory: TVBoxOSC
        run: |
          # 版本号 = 提交数
          version_code=$(git rev-list --count HEAD)
          
          # 版本名 = 构建时间标签
          version_name="${{ env.构建标签 }}"
          
          # 修改build.gradle
          sed -i "s/versionCode .*/versionCode $version_code/" ./app/build.gradle
          sed -i "s/versionName .*/versionName \"$version_name\"/" ./app/build.gradle
          sed -i "s/applicationId .*/applicationId \"${{ matrix.userName }}.tvbox.osc\"/" ./app/build.gradle

      # 步骤6：设置构建环境
      - name: Setup JDK
        if: ${{ env.commit && matrix.javaVersion }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ matrix.javaVersion }}

      - name: Setup Gradle
        if: ${{ env.commit }}
        uses: gradle/actions/setup-gradle@v4

      # 步骤7：执行构建
      - name: Build APK
        if: ${{ env.commit }}
        working-directory: TVBoxOSC
        run: |
          ./gradlew assembleRelease \
            --no-daemon \
            --warning-mode all \
            --stacktrace

      # 步骤8：整理输出文件
      - name: Prepare Artifacts
        if: ${{ env.commit }}
        working-directory: TVBoxOSC
        run: |
          mkdir -p artifacts
          
          # 移动APK文件
          find . -name "*.apk" -not -name "*debug*" -exec cp {} artifacts \;
          
          # 重命名APK文件
          cd artifacts
          for apk in *.apk; do
            new_name="TVBox_${apk%%-release*}_${{ matrix.userName }}_${{ env.构建标签 }}.apk"
            mv "$apk" "$new_name"
          done
          
          # 打包源码
          cd ..
          zip -r artifacts/source_${{ env.commit_short }}.zip . \
            -x ".git/*" "build/*" "*.apk"

      # 步骤9：上传构建结果
      - name: Upload Artifacts
        if: ${{ env.commit }}
        uses: actions/upload-artifact@v4
        with:
          name: Build_${{ matrix.userName }}_${{ env.构建标签 }}
          path: TVBoxOSC/artifacts/*
          retention-days: 7

      # 步骤10：更新构建记录
      - name: Update Build Log
        if: ${{ env.commit }}
        working-directory: actions
        run: |
          mkdir -p build_log
          echo "${{ env.commit }}" > ./build_log/${{ matrix.userName }}.log
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add ./build_log
          git commit -m "Update build log for ${{ matrix.userName }}"
          git push
